// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
    output          = "../../../node_modules/.prisma/client"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DATABASE_DIRECT_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Enums
// Docs: https://www.prisma.io/docs/guides/upgrade-guides/upgrade-from-prisma-1/schema-incompatibilities-postgresql#enums-are-represented-as-text-in-database

enum Role {
    user
    admin
    superadmin
}

enum TeamRole {
    admin
    member
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    username      String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    banned        Boolean   @default(false)
    createdAt     DateTime  @default(now())
    role          Role      @default(user)

    totalClicks Int @default(0)
    totalUrls   Int @default(0)

    accounts Account[]
    sessions Session[]
    urls     Url[]
    clicks   Click[]

    teamMembers TeamMember[]

    @@index([email])
}

model VerificationToken {
    identifier String
    token      String   @unique @db.Text
    expires    DateTime

    @@unique([identifier, token])
}

model Url {
    id         String   @id @default(cuid())
    url        String   @db.Text
    slug       String   @unique
    clickCount Int      @default(0)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    userId     String?
    localId    String?
    isActive   Boolean  @default(true)

    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    clicks Click[]

    @@index([userId])
    @@index([slug])
    @@index([localId])
}

model Click {
    id             String   @id @default(cuid())
    urlId          String
    userId         String?
    browser        String?
    browserVersion String?
    device         String?
    deviceVendor   String?
    os             String?
    osVersion      String?
    country        String?
    region         String?
    city           String?
    latitude       Float?
    longitude      Float?
    createdAt      DateTime @default(now())

    url  Url   @relation(fields: [urlId], references: [id], onDelete: Cascade)
    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([urlId])
    @@index([userId])
}

model Team {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    members TeamMember[]
}

model TeamMember {
    id        String   @id @default(cuid())
    teamId    String
    userId    String
    role      TeamRole @default(member)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([teamId, userId])
}
